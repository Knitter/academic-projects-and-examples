/*
 * SudokuSolver.java
 *
 * Created on May 7, 2008, 1:48 AM
 */
package pt.ipleiria.estg.ia.sudokusolver.gui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import pt.ipleiria.estg.ia.sudokusolver.solver.AlgoritmoGenetico;
import pt.ipleiria.estg.ia.sudokusolver.solver.AlgoritmoGeneticoListener;
import pt.ipleiria.estg.ia.sudokusolver.solver.DoisPontosCorte;
import pt.ipleiria.estg.ia.sudokusolver.solver.Gene;
import pt.ipleiria.estg.ia.sudokusolver.solver.UniformCrossover;
import pt.ipleiria.estg.ia.sudokusolver.solver.Individuo;
import pt.ipleiria.estg.ia.sudokusolver.solver.MetodoSeleccao;
import pt.ipleiria.estg.ia.sudokusolver.solver.Mutacao;
import pt.ipleiria.estg.ia.sudokusolver.solver.Recombinacao;
import pt.ipleiria.estg.ia.sudokusolver.solver.Roleta;
import pt.ipleiria.estg.ia.sudokusolver.solver.Torneio;
import pt.ipleiria.estg.ia.sudokusolver.solver.UmPontoCorte;

/**
 *
 * @author  knitter
 */
public class SudokuSolver extends javax.swing.JFrame implements AlgoritmoGeneticoListener {

    private AlgoritmoGenetico solver;
    private Gene[][] genomaActual = new Gene[Individuo.TAMANHOGENOMA][Individuo.TAMANHOGENOMA];
    private boolean changed = false;
    private long startTime;

    /** Creates new form SudokuSolver */
    public SudokuSolver() {
        initComponents();
        jsNumeroTorneio.setEnabled(jrbTorneio.isEnabled());
        showCentered();
        jtaSudokuTexto.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                changed = true;
            }

            public void removeUpdate(DocumentEvent e) {
                changed = true;
            }

            public void changedUpdate(DocumentEvent e) {
                changed = true;
            }
        });
    }

    private void showCentered() {
        Dimension scrSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension mySize = getSize();

        if (mySize.height > scrSize.height) {
            mySize.height = scrSize.height;
        }

        if (mySize.width > scrSize.width) {
            mySize.width = scrSize.width;
        }

        setLocation((scrSize.width - mySize.width) / 2,
                (scrSize.height - mySize.height) / 2);
    }

    /**
     * Metodo que divide um sudoku apresentado em texto nos seus elementos.
     * 
     * @param sudoku representacao textual de um sudoku
     */
    private void parseSodokuAsString(String sudoku) {
        //5 3  |  7  |
        //6    |1 9 5|
        //  9 8|     |  6
        //-----+-----+-----
        //8    |  6  |    3
        //4    |8   3|    1
        //7    |  2  |    6
        //-----+-----+-----
        //  6  |     |2 8
        //     |4 1 9|    5
        //     |  8  |  7 9
        //1 2 3|4 5 6|7 8 9

        //Todas as linhas terao de estar terminadas por um terminador \n
        String[] lines = sudoku.split("\\n");
        char c;
        int y, length, current = 0;
        for (int z = 0; z < lines.length; z++) {
            //Saltar as linhas de separacao de blocos, -----+-----+-----
            if ((z + 1) % 4 == 0) {
                continue;
            }
            length = lines[z].length();

            //O ciclo assume que existe sempre um espaco depois de cada numero 
            //ou uma barra vertical a separar seccoes
            for (y = 0; y < length; y += 2) {
                c = lines[z].charAt(y);
                if (Character.isDigit(c)) {
                    //mapear a posicao do caracter actual com a posicao destinho 
                    //no genoma e criar o gene correspondente
                    genomaActual[current][y / 2] = new Gene(true, Character.digit(c, 10));
                }
            }
            current++;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgRecombinacao = new javax.swing.ButtonGroup();
        bgSeleccao = new javax.swing.ButtonGroup();
        bgTorneio = new javax.swing.ButtonGroup();
        jtbFerramentas = new javax.swing.JToolBar();
        jbImportar = new javax.swing.JButton();
        jbExportar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jbIniciar = new javax.swing.JButton();
        jbParar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jbSair = new javax.swing.JButton();
        jspDivisorPrincipal = new javax.swing.JSplitPane();
        jpPainelTopo = new javax.swing.JPanel();
        jscrlSudokuTexto = new javax.swing.JScrollPane();
        jtaSudokuTexto = new javax.swing.JTextArea();
        jpFundo = new javax.swing.JPanel();
        jsclResultados = new javax.swing.JScrollPane();
        jtaResultados = new javax.swing.JTextArea();
        jpOpcoes = new javax.swing.JPanel();
        jpOpcoesRecombinacao = new javax.swing.JPanel();
        jrbUmCorte = new javax.swing.JRadioButton();
        jrbDoisCortes = new javax.swing.JRadioButton();
        jrbHUX = new javax.swing.JRadioButton();
        jpOpcoesSeleccao = new javax.swing.JPanel();
        jrbRoleta = new javax.swing.JRadioButton();
        jrbTorneio = new javax.swing.JRadioButton();
        jsNumeroTorneio = new javax.swing.JSpinner();
        jpOpcoeAlgoritmoGenetico = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jsTamanhoPopulacao = new javax.swing.JSpinner();
        jsProbabilidadeRecombinacao = new javax.swing.JSpinner();
        jsMaximoGeracoes = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jtfSeed = new javax.swing.JTextField();
        jsProbabilidadeMutacao = new javax.swing.JSpinner();
        jSeparator3 = new javax.swing.JSeparator();
        jcbxTipoMutacao = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jpGeracaoActual = new javax.swing.JPanel();
        jtfGeracaoActual = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtbFerramentas.setFloatable(false);
        jtbFerramentas.setRollover(true);

        jbImportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt/ipleiria/estg/ia/sudokusolver/resources/go-bottom.png"))); // NOI18N
        jbImportar.setToolTipText("Importar");
        jbImportar.setFocusable(false);
        jbImportar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbImportar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportarActionPerformed(evt);
            }
        });
        jtbFerramentas.add(jbImportar);

        jbExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt/ipleiria/estg/ia/sudokusolver/resources/go-top.png"))); // NOI18N
        jbExportar.setToolTipText("Exportar");
        jbExportar.setFocusable(false);
        jbExportar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbExportar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportarActionPerformed(evt);
            }
        });
        jtbFerramentas.add(jbExportar);
        jtbFerramentas.add(jSeparator1);

        jbIniciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt/ipleiria/estg/ia/sudokusolver/resources/system-run.png"))); // NOI18N
        jbIniciar.setToolTipText("Iniciar");
        jbIniciar.setFocusable(false);
        jbIniciar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbIniciar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbIniciarActionPerformed(evt);
            }
        });
        jtbFerramentas.add(jbIniciar);

        jbParar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt/ipleiria/estg/ia/sudokusolver/resources/process-stop.png"))); // NOI18N
        jbParar.setToolTipText("Parar");
        jbParar.setEnabled(false);
        jbParar.setFocusable(false);
        jbParar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbParar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPararActionPerformed(evt);
            }
        });
        jtbFerramentas.add(jbParar);
        jtbFerramentas.add(jSeparator2);

        jbSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt/ipleiria/estg/ia/sudokusolver/resources/system-log-out.png"))); // NOI18N
        jbSair.setToolTipText("Sair");
        jbSair.setFocusable(false);
        jbSair.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSair.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSairActionPerformed(evt);
            }
        });
        jtbFerramentas.add(jbSair);

        jspDivisorPrincipal.setDividerLocation(220);
        jspDivisorPrincipal.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jtaSudokuTexto.setColumns(20);
        jtaSudokuTexto.setRows(5);
        jscrlSudokuTexto.setViewportView(jtaSudokuTexto);

        javax.swing.GroupLayout jpPainelTopoLayout = new javax.swing.GroupLayout(jpPainelTopo);
        jpPainelTopo.setLayout(jpPainelTopoLayout);
        jpPainelTopoLayout.setHorizontalGroup(
            jpPainelTopoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jscrlSudokuTexto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
        );
        jpPainelTopoLayout.setVerticalGroup(
            jpPainelTopoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jscrlSudokuTexto, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        );

        jspDivisorPrincipal.setTopComponent(jpPainelTopo);

        jtaResultados.setColumns(20);
        jtaResultados.setEditable(false);
        jtaResultados.setRows(5);
        jsclResultados.setViewportView(jtaResultados);

        javax.swing.GroupLayout jpFundoLayout = new javax.swing.GroupLayout(jpFundo);
        jpFundo.setLayout(jpFundoLayout);
        jpFundoLayout.setHorizontalGroup(
            jpFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsclResultados, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
        );
        jpFundoLayout.setVerticalGroup(
            jpFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsclResultados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
        );

        jspDivisorPrincipal.setRightComponent(jpFundo);

        jpOpcoesRecombinacao.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de Recombinação"));

        bgRecombinacao.add(jrbUmCorte);
        jrbUmCorte.setSelected(true);
        jrbUmCorte.setText("Um Ponto de Corte");

        bgRecombinacao.add(jrbDoisCortes);
        jrbDoisCortes.setText("Dois Pontos de Corte");

        bgRecombinacao.add(jrbHUX);
        jrbHUX.setText("Uniform Crossover");

        javax.swing.GroupLayout jpOpcoesRecombinacaoLayout = new javax.swing.GroupLayout(jpOpcoesRecombinacao);
        jpOpcoesRecombinacao.setLayout(jpOpcoesRecombinacaoLayout);
        jpOpcoesRecombinacaoLayout.setHorizontalGroup(
            jpOpcoesRecombinacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOpcoesRecombinacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpOpcoesRecombinacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbUmCorte)
                    .addComponent(jrbDoisCortes)
                    .addComponent(jrbHUX))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        jpOpcoesRecombinacaoLayout.setVerticalGroup(
            jpOpcoesRecombinacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOpcoesRecombinacaoLayout.createSequentialGroup()
                .addComponent(jrbUmCorte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbDoisCortes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbHUX)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpOpcoesSeleccao.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de Selecção"));

        bgSeleccao.add(jrbRoleta);
        jrbRoleta.setText("Roleta");

        bgSeleccao.add(jrbTorneio);
        jrbTorneio.setSelected(true);
        jrbTorneio.setText("Torneio");
        jrbTorneio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jrbTorneioStateChanged(evt);
            }
        });

        jsNumeroTorneio.setModel(new javax.swing.SpinnerNumberModel(2, 0, 50, 1));

        javax.swing.GroupLayout jpOpcoesSeleccaoLayout = new javax.swing.GroupLayout(jpOpcoesSeleccao);
        jpOpcoesSeleccao.setLayout(jpOpcoesSeleccaoLayout);
        jpOpcoesSeleccaoLayout.setHorizontalGroup(
            jpOpcoesSeleccaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOpcoesSeleccaoLayout.createSequentialGroup()
                .addGroup(jpOpcoesSeleccaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpOpcoesSeleccaoLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jsNumeroTorneio, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpOpcoesSeleccaoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpOpcoesSeleccaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jrbRoleta)
                            .addComponent(jrbTorneio))))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        jpOpcoesSeleccaoLayout.setVerticalGroup(
            jpOpcoesSeleccaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOpcoesSeleccaoLayout.createSequentialGroup()
                .addComponent(jrbRoleta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbTorneio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jsNumeroTorneio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpOpcoeAlgoritmoGenetico.setBorder(javax.swing.BorderFactory.createTitledBorder("Opções do Algoritmo Genético"));

        jLabel1.setText("Tamanho População:");

        jLabel3.setText("Probabilidade de Mutação:");

        jLabel4.setText("Numero Maximo de Gerações:");

        jLabel5.setText("Semente:");

        jsTamanhoPopulacao.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        jsTamanhoPopulacao.setValue(100);

        jsProbabilidadeRecombinacao.setModel(new SpinnerNumberModel(0.7, 0.0, 1.0, 0.1));

        jsMaximoGeracoes.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5000), Integer.valueOf(0), null, Integer.valueOf(100)));

        jLabel2.setText("Probabilidade de Recombinação:");

        jtfSeed.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfSeed.setText("35");

        jsProbabilidadeMutacao.setModel(new SpinnerNumberModel(0.001, 0.000, 1.000, 0.001));

        jcbxTipoMutacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Com Restricoes", "Em Quantidade", "Simples", "Simples Al.", "Troca De Blocos", "Troca de Genes" }));
        jcbxTipoMutacao.setSelectedIndex(3);

        jLabel6.setText("Tipo de Mutação:");

        javax.swing.GroupLayout jpOpcoeAlgoritmoGeneticoLayout = new javax.swing.GroupLayout(jpOpcoeAlgoritmoGenetico);
        jpOpcoeAlgoritmoGenetico.setLayout(jpOpcoeAlgoritmoGeneticoLayout);
        jpOpcoeAlgoritmoGeneticoLayout.setHorizontalGroup(
            jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createSequentialGroup()
                        .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfSeed, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(jsTamanhoPopulacao, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(jsProbabilidadeRecombinacao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(jsMaximoGeracoes, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(jsProbabilidadeMutacao, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)))
                    .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbxTipoMutacao, 0, 137, Short.MAX_VALUE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpOpcoeAlgoritmoGeneticoLayout.setVerticalGroup(
            jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createSequentialGroup()
                .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jsTamanhoPopulacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jsProbabilidadeRecombinacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jsProbabilidadeMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jsMaximoGeracoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOpcoeAlgoritmoGeneticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jcbxTipoMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpGeracaoActual.setBorder(javax.swing.BorderFactory.createTitledBorder("Gerações:"));

        jtfGeracaoActual.setEditable(false);
        jtfGeracaoActual.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jpGeracaoActualLayout = new javax.swing.GroupLayout(jpGeracaoActual);
        jpGeracaoActual.setLayout(jpGeracaoActualLayout);
        jpGeracaoActualLayout.setHorizontalGroup(
            jpGeracaoActualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpGeracaoActualLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtfGeracaoActual, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpGeracaoActualLayout.setVerticalGroup(
            jpGeracaoActualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGeracaoActualLayout.createSequentialGroup()
                .addComponent(jtfGeracaoActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpOpcoesLayout = new javax.swing.GroupLayout(jpOpcoes);
        jpOpcoes.setLayout(jpOpcoesLayout);
        jpOpcoesLayout.setHorizontalGroup(
            jpOpcoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOpcoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpOpcoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpOpcoesRecombinacao, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpOpcoesSeleccao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpOpcoeAlgoritmoGenetico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpGeracaoActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jpOpcoesLayout.setVerticalGroup(
            jpOpcoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOpcoesLayout.createSequentialGroup()
                .addComponent(jpOpcoesRecombinacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpOpcoesSeleccao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpOpcoeAlgoritmoGenetico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpGeracaoActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtbFerramentas, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jspDivisorPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpOpcoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jtbFerramentas, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jspDivisorPrincipal, 0, 0, Short.MAX_VALUE)
                    .addComponent(jpOpcoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jrbTorneioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jrbTorneioStateChanged
    jsNumeroTorneio.setEnabled(jrbTorneio.isSelected());
}//GEN-LAST:event_jrbTorneioStateChanged

private void jbSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSairActionPerformed
    System.exit(0);
}//GEN-LAST:event_jbSairActionPerformed

private void jbImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportarActionPerformed
    JFileChooser jfc = new JFileChooser(System.getProperty("user.home"));
    if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        BufferedReader br = null;
        StringBuffer buff = new StringBuffer(11);
        try {
            br = new BufferedReader(new FileReader(jfc.getSelectedFile()));
            String line;
            while ((line = br.readLine()) != null) {
                buff.append(line);
                buff.append("\n");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SudokuSolver.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            //IGNORE
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(SudokuSolver.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jtaSudokuTexto.setText(buff.toString());
        parseSodokuAsString(buff.toString());
        changed = false;
    }
}//GEN-LAST:event_jbImportarActionPerformed

private void jbExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportarActionPerformed
    JFileChooser jfc = new JFileChooser(System.getProperty("user.home"));
    if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        //TODO: exportar dados
    }
}//GEN-LAST:event_jbExportarActionPerformed

private void jbPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPararActionPerformed
    if (solver != null) {
        jbIniciar.setEnabled(true);
        jbParar.setEnabled(false);
        solver.parar();
        long executionTime = System.currentTimeMillis() - startTime;
        jtaResultados.setText("Execução abortada.\nExecutadas " + solver.getGeracao() + " de " + solver.getMaximoGeracoes() + " gerações.\nTempo de execução: " + executionTime / 1000 + " segundos");
    }
}//GEN-LAST:event_jbPararActionPerformed

private void jbIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbIniciarActionPerformed
    if (changed) {
        parseSodokuAsString(jtaSudokuTexto.getText().trim());
        changed = false;
    }

    jtaResultados.setText("A executar...");
    int maxGeracoes = Integer.parseInt(jsMaximoGeracoes.getValue().toString());
    long seed = Long.parseLong(jtfSeed.getText().trim());
    double probMutacao = Double.parseDouble(jsProbabilidadeMutacao.getValue().toString());
    double probRecombinacao = Double.parseDouble(jsProbabilidadeRecombinacao.getValue().toString());
    int tamanhoPop = Integer.parseInt(jsTamanhoPopulacao.getValue().toString());
    MetodoSeleccao seleccao = jrbTorneio.isSelected() ? new Torneio(Integer.parseInt(jsNumeroTorneio.getValue().toString())) : new Roleta();

    Recombinacao operador = jrbUmCorte.isSelected() ? new UmPontoCorte(probRecombinacao) : jrbDoisCortes.isSelected() ? new DoisPontosCorte(probRecombinacao) : new UniformCrossover(probRecombinacao);

    String mut = (String) jcbxTipoMutacao.getSelectedItem();
    int tipo;
    if (mut.equals("Com Restricoes")) {
        tipo = Mutacao.RESTRICOES;
    } else if (mut.equals("Em Quantidade")) {
        tipo = Mutacao.QUANTIDADE;
    } else if (mut.equals("Simples")) {
        tipo = Mutacao.SIMPLES;
    } else if (mut.equals("Simples Al.")) {
        tipo = Mutacao.SIMPLES_ALEATORIA;
    } else if (mut.equals("Troca de Genes")) {
        tipo = Mutacao.TROCA_GENES;
    } else {
        tipo = Mutacao.TROCA_BLOCOS;
    }
    solver = new AlgoritmoGenetico(seed, tamanhoPop, maxGeracoes, seleccao, probRecombinacao, probMutacao, operador, genomaActual, tipo);
    solver.addListener(this);
    startTime = System.currentTimeMillis();
    solver.executar();
    jbParar.setEnabled(true);
    jbIniciar.setEnabled(false);
}//GEN-LAST:event_jbIniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SudokuSolver.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(SudokuSolver.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(SudokuSolver.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(SudokuSolver.class.getName()).log(Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SudokuSolver().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgRecombinacao;
    private javax.swing.ButtonGroup bgSeleccao;
    private javax.swing.ButtonGroup bgTorneio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbExportar;
    private javax.swing.JButton jbImportar;
    private javax.swing.JButton jbIniciar;
    private javax.swing.JButton jbParar;
    private javax.swing.JButton jbSair;
    private javax.swing.JComboBox jcbxTipoMutacao;
    private javax.swing.JPanel jpFundo;
    private javax.swing.JPanel jpGeracaoActual;
    private javax.swing.JPanel jpOpcoeAlgoritmoGenetico;
    private javax.swing.JPanel jpOpcoes;
    private javax.swing.JPanel jpOpcoesRecombinacao;
    private javax.swing.JPanel jpOpcoesSeleccao;
    private javax.swing.JPanel jpPainelTopo;
    private javax.swing.JRadioButton jrbDoisCortes;
    private javax.swing.JRadioButton jrbHUX;
    private javax.swing.JRadioButton jrbRoleta;
    private javax.swing.JRadioButton jrbTorneio;
    private javax.swing.JRadioButton jrbUmCorte;
    private javax.swing.JSpinner jsMaximoGeracoes;
    private javax.swing.JSpinner jsNumeroTorneio;
    private javax.swing.JSpinner jsProbabilidadeMutacao;
    private javax.swing.JSpinner jsProbabilidadeRecombinacao;
    private javax.swing.JSpinner jsTamanhoPopulacao;
    private javax.swing.JScrollPane jsclResultados;
    private javax.swing.JScrollPane jscrlSudokuTexto;
    private javax.swing.JSplitPane jspDivisorPrincipal;
    private javax.swing.JTextArea jtaResultados;
    private javax.swing.JTextArea jtaSudokuTexto;
    private javax.swing.JToolBar jtbFerramentas;
    private javax.swing.JTextField jtfGeracaoActual;
    private javax.swing.JTextField jtfSeed;
    // End of variables declaration//GEN-END:variables
    public void runFinished(AlgoritmoGenetico g) {
        jbParar.setEnabled(false);
        jbIniciar.setEnabled(true);
        if (g.isRunning()) {
            long executionTime = System.currentTimeMillis() - startTime;
            jtaResultados.setText("Execução terminada.\nExecutadas " + g.getGeracao() + " gerações.\nTempo de execução: " + executionTime / 1000 + " segundos\nMelhor individuo encontrado:\n\n" + g.getMelhorIndividuoRun());
        }
    }

    public void currentGeneration(int gen) {
        jtfGeracaoActual.setText(String.valueOf(gen + 1));
    }
}
