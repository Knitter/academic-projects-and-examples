/* Generated by Together */

package furyPackage.estados;

import furyPackage.Corda;
import furyPackage.Tiny;
import jge2d.AnimacaoSprite;
import jge2d.Ponto;

/**
 * Habilidade que permite o Tiny ter uma corda
 */
public final class HabilidadeCorda extends Habilidade {

    private Corda corda;
    private boolean podeLancarCorda = true;
    private static final double CATETO = Corda.COMPRIMENTO_MAXIMO * Math.sqrt(2) / 2;

    public static final String NOME_HABILIDADE = "corda";

    public static final String ESQUERDA = NOME_HABILIDADE + NOME_ESQUERDA;
    public static final String DIREITA = NOME_HABILIDADE + NOME_DIREITA;
    public static final String FRENTE = NOME_HABILIDADE + NOME_FRENTE;
    public static final String HOP = NOME_HABILIDADE + NOME_HOP;
    public static final String FLY_DIREITA = NOME_HABILIDADE + NOME_FLY_DIREITA;
    public static final String FLY_ESQUERDA = NOME_HABILIDADE + NOME_FLY_ESQUERDA;
    public static final String SELECT = NOME_HABILIDADE + NOME_SELECT;
    public static final String PENDURADO = "pendurado";


    public Corda getCorda() {
        return corda;
    }

    /**
     * @param heroi - Tiny
     * @param cor - Cor da habilidade
     * @param disponivel - Disponibilidade da habilidade
     * @param corda - Corda a atribuir à habilidade e ao Tiny
     */
    public HabilidadeCorda(Tiny heroi, boolean disponivel) {
        super(heroi, disponivel);
        corda = new Corda("corda", new Ponto(), heroi.getNivel(), heroi.getVelocidade() * 2, 0, heroi);

        heroi.getSprite().adicionarAnimacao(FRENTE, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {192} , new int[] {192}, new int[] {192}, 1, 1000, 1));
        heroi.getSprite().adicionarAnimacao(DIREITA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {}, new int[] {118, 119, 120, 121, 122, 123, 124, 125}, new int[] {191, 194}, 0, 100, 50));
        heroi.getSprite().adicionarAnimacao(ESQUERDA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {}, new int[] {131, 132, 133, 134, 135, 136, 137, 138}, new int[] {193, 195}, 0, 100, 50));
        heroi.getSprite().adicionarAnimacao(HOP, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {178}, new int[] {179,178}, new int[] {178}, 100, 200, 100));
        heroi.getSprite().adicionarAnimacao(FLY_DIREITA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {144}, new int[] {145,146,147,148,149,150}, new int[] {151}, 100, 100, 100));
        heroi.getSprite().adicionarAnimacao(FLY_ESQUERDA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {157}, new int[] {158,159,160,161,162,163}, new int[] {164}, 100, 100, 100));
        heroi.getSprite().adicionarAnimacao(SELECT, new AnimacaoSprite(heroi.getNivel().getImagem("animacoesSeleccao"), new int[] {}, new int[] {19, 20, 21, 22, 23, 24, 23, 22, 21, 20}, new int[] {}, 0, 75, 0));
        heroi.getSprite().adicionarAnimacao(PENDURADO, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {}, new int[] {199, 200, 201, 200}, new int[] {}, 0, 150, 0));
    }

    public void alterarPermissaoDeLancarCorda() {
        podeLancarCorda = !podeLancarCorda;
    }

    /**
     * Dispara a corda no sentido da orientação do Tiny
     */
    public void disparar(long tempo){
        getHeroi().getOrientacaoActual().disparar(tempo);
    }

    /**
     * Dispara a corda para cima
     */
    public void dispararCima() {
    }

    public String getAnimacaoEsquerda() {
        return ESQUERDA;
    }

    public String getAnimacaoDireita() {
        return DIREITA;
    }

    public String getAnimacaoFrente() {
        return FRENTE;
    }

    public String getAnimacaoSalto() {
        return HOP;
    }

    public String getAnimacaoSaltoEsquerdo() {
        return FLY_ESQUERDA;
    }

    public String getAnimacaoSaltoDireito() {
        return FLY_DIREITA;
    }

    public String getAnimacaoSeleccao() {
        return SELECT;
    }

    public String toString() {
        return new String("corda");
    }

    /**
     * dispararEsquerda
     *
     * @param tempo long
     */
    public void dispararEsquerda(long tempo) {
        corda.lancar(new Ponto(corda.getHeroi().getMovimentoActual().getUltimaPosicao().getX() - CATETO, corda.getHeroi().getMovimentoActual().getUltimaPosicao().getY() - CATETO), tempo);
    }

    /**
     * dispararDireita
     *
     * @param tempo long
     */
    public void dispararDireita(long tempo) {
        corda.lancar(new Ponto(corda.getHeroi().getMovimentoActual().getUltimaPosicao().getX() + CATETO, corda.getHeroi().getMovimentoActual().getUltimaPosicao().getY() - CATETO), tempo);
    }

    /**
     * dispararParado
     *
     * @param tempo long
     */
    public void dispararParado(long tempo) {
        corda.lancar(new Ponto(corda.getHeroi().getSprite().getUltimaPosicao().getX(), corda.getHeroi().getSprite().getUltimaPosicao().getY() - Corda.COMPRIMENTO_MAXIMO), tempo);
    }

}
