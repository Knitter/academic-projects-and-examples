/* Generated by Together */

package furyPackage.estados;

import furyPackage.Tiny;
import jge2d.AnimacaoSprite;

/**
 * Habilidade que permite o Tiny escolher outras habilidades
 */
public final class HabilidadeSeleccao extends Habilidade {

    public static final String NOME_HABILIDADE = "seleccao";

    public static final String ESQUERDA = NOME_HABILIDADE + NOME_ESQUERDA;
    public static final String DIREITA = NOME_HABILIDADE + NOME_DIREITA;
    public static final String FRENTE = NOME_HABILIDADE + NOME_FRENTE;
    public static final String HOP = NOME_HABILIDADE + NOME_HOP;
    public static final String FLY_DIREITA = NOME_HABILIDADE + NOME_FLY_DIREITA;
    public static final String FLY_ESQUERDA = NOME_HABILIDADE + NOME_FLY_ESQUERDA;
    public static final String SELECT = NOME_HABILIDADE + NOME_SELECT;
    private int habilidadeSeleccionada;

    /**
     * @param heroi - Tiny
     * @param cor - Cor da habilidade
     * @param disponivel - Disponibilidade da habilidade.
     */
    public HabilidadeSeleccao(Tiny heroi) {
        super(heroi, false);
        heroi.getSprite().adicionarAnimacao(FRENTE, new AnimacaoSprite(heroi.getNivel().getImagem("furriesShadow"), new int[] {309} , new int[] {309}, new int[] {309}, 1, 1000, 1));
        heroi.getSprite().adicionarAnimacao(DIREITA, new AnimacaoSprite(heroi.getNivel().getImagem("furriesShadow"), new int[] {}, new int[] {235, 236, 237, 238, 239, 240, 241, 242}, new int[] {308, 311}, 0, 100, 50));
        heroi.getSprite().adicionarAnimacao(ESQUERDA, new AnimacaoSprite(heroi.getNivel().getImagem("furriesShadow"), new int[] {}, new int[] {248, 249, 250, 251, 252, 253, 254, 255}, new int[] {310, 312}, 0, 100, 50));
        heroi.getSprite().adicionarAnimacao(HOP, new AnimacaoSprite(heroi.getNivel().getImagem("furriesShadow"), new int[] {295}, new int[] {296,295}, new int[] {295}, 100, 200, 100));
        heroi.getSprite().adicionarAnimacao(FLY_DIREITA, new AnimacaoSprite(heroi.getNivel().getImagem("furriesShadow"), new int[] {261}, new int[] {262,263,264,265,266,267}, new int[] {268}, 100, 100, 100));
        heroi.getSprite().adicionarAnimacao(FLY_ESQUERDA, new AnimacaoSprite(heroi.getNivel().getImagem("furriesShadow"), new int[] {274}, new int[] {275,276,277,278,279,280}, new int[] {281}, 100, 100, 100));
        heroi.getSprite().adicionarAnimacao(SELECT, new AnimacaoSprite(heroi.getNivel().getImagem("animacoesSeleccao"), new int[] {}, new int[] {1, 2, 3, 4, 5, 6, 5, 4, 3, 2}, new int[] {}, 0, 75, 0));
    }

    /**
     * Activa no Tiny a habilidade seleccionada
     */
    public void disparar(long tempo) {
        getHeroi().getEstadoActual().moverBaixo(tempo);
    }

    public String getAnimacaoEsquerda() {
        return ESQUERDA;
    }

    public String getAnimacaoDireita() {
        return DIREITA;
    }

    public String getAnimacaoFrente() {
        return FRENTE;
    }

    public String getAnimacaoSalto() {
        return HOP;
    }

    public String getAnimacaoSaltoEsquerdo() {
        return FLY_ESQUERDA;
    }

    public String getAnimacaoSaltoDireito() {
        return FLY_DIREITA;
    }

    public int getHabilidadeSeleccionada() {
        return habilidadeSeleccionada;
    }

    public void setHabilidadeSelecionada(int habilidade) {
        habilidadeSeleccionada = habilidade;
    }

    public void moverDireita(long tempo){
        habilidadeSeleccionada = getHeroi().seleccionarProximaHabilidade();
        getHeroi().getSprite().setAnimacao(getHeroi().getHabilidade(habilidadeSeleccionada).getAnimacaoSeleccao(), false, tempo);
    }

    public void moverEsquerda(long tempo){
        habilidadeSeleccionada = getHeroi().selecionarHabilidadeAnterior();
        getHeroi().getSprite().setAnimacao(getHeroi().getHabilidade(habilidadeSeleccionada).getAnimacaoSeleccao(), false, tempo);
    }

    public void seleccionarHabilidade(){
        getHeroi().mudarHabilidade(habilidadeSeleccionada);
    }

    public String getAnimacaoSeleccao() {
        return SELECT;
    }

    public String toString() {
        return NOME_HABILIDADE;
    }

    /**
     * dispararDireita
     *
     * @param tempo long
     */
    public void dispararDireita(long tempo) {
    }

    /**
     * dispararEsquerda
     *
     * @param tempo long
     */
    public void dispararEsquerda(long tempo) {
    }

    /**
     * dispararParado
     *
     * @param tempo long
     */
    public void dispararParado(long tempo) {
    }
}
