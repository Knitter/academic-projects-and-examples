/* Generated by Together */

package furyPackage.estados;

import furyPackage.BolaFogo;
import furyPackage.BolaFogoDireita;
import furyPackage.BolaFogoEsquerda;
import furyPackage.Tiny;
import jge2d.AnimacaoSprite;
import jge2d.Ponto;

/**
 * Habilidade que permite o Tiny ter uma bola de fogo
 */
public final class HabilidadeFogo extends Habilidade {

    private BolaFogo[] bolasFogo;
    private Orientacao ultimaOrientacao;

    public static final String NOME_HABILIDADE = "fogo";

    public static final String ESQUERDA = NOME_HABILIDADE + NOME_ESQUERDA;
    public static final String DIREITA = NOME_HABILIDADE + NOME_DIREITA;
    public static final String FRENTE = NOME_HABILIDADE + NOME_FRENTE;
    public static final String HOP = NOME_HABILIDADE + NOME_HOP;
    public static final String FLY_DIREITA = NOME_HABILIDADE + NOME_FLY_DIREITA;
    public static final String FLY_ESQUERDA = NOME_HABILIDADE + NOME_FLY_ESQUERDA;
    public static final String SELECT = NOME_HABILIDADE + NOME_SELECT;

    /**
     * @param heroi - Tiny
     * @param cor - Cor da habilidade
     * @param disponivel - Disponibilidade da habilidade
     * @param bolaFogo - Bola de fogo a atribuir à habilidade
     */
    public HabilidadeFogo(Tiny heroi, boolean disponivel) {
        super(heroi, disponivel);
        bolasFogo = new BolaFogo[] {
                    new BolaFogoEsquerda("bolaFogoEsquerda", new Ponto(), heroi.getNivel(), heroi.getVelocidade() * 2, heroi.getNivel().getMapa().getWidth()),
                    new BolaFogoDireita("bolaFogoDireita", new Ponto(), heroi.getNivel(), heroi.getVelocidade() * 2, heroi.getNivel().getMapa().getWidth())
                };
        heroi.getSprite().adicionarAnimacao(FRENTE, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {75} , new int[] {75}, new int[] {75}, 1, 1000, 1));
        heroi.getSprite().adicionarAnimacao(DIREITA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {}, new int[] {1, 2, 3, 4, 5, 6, 7, 8}, new int[] {74, 77}, 0, 100, 50));
        heroi.getSprite().adicionarAnimacao(ESQUERDA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {}, new int[] {14, 15, 16, 17, 18, 19, 20, 21}, new int[] {76, 78}, 0, 100, 50));
        heroi.getSprite().adicionarAnimacao(HOP, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {61}, new int[] {62,61}, new int[] {61}, 100, 200, 100));
        heroi.getSprite().adicionarAnimacao(FLY_DIREITA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {27}, new int[] {28,29,30,31,32,33}, new int[] {34}, 100, 100, 100));
        heroi.getSprite().adicionarAnimacao(FLY_ESQUERDA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {40}, new int[] {41,42,43,44,45,46}, new int[] {47}, 100, 100, 100));
        heroi.getSprite().adicionarAnimacao(SELECT, new AnimacaoSprite(heroi.getNivel().getImagem("animacoesSeleccao"), new int[] {} , new int[] {7, 8, 9, 10, 11, 12, 11, 10, 9, 8}, new int[] {}, 0, 75, 0));
    }

    /**
     * Dispara uma bola de fogo na direcção do Tiny
     */
    public void disparar(long tempo){
        getHeroi().getOrientacaoActual().disparar(tempo);
    }

    public String getAnimacaoEsquerda() {
        return ESQUERDA;
    }

    public String getAnimacaoDireita() {
        return DIREITA;
    }

    public String getAnimacaoFrente() {
        return FRENTE;
    }

    public String getAnimacaoSalto() {
        return HOP;
    }

    public String getAnimacaoSaltoEsquerdo() {
        return FLY_ESQUERDA;
    }

    public String getAnimacaoSaltoDireito() {
        return FLY_DIREITA;
    }

    public String getAnimacaoSeleccao() {
        return SELECT;
    }

    public String toString() {
        return NOME_HABILIDADE;
    }

    public void setUltimaOrientacao(int orientacao){
        ultimaOrientacao = getHeroi().getOrientacao(orientacao);
    }

    /**
     * dispararEsquerda
     *
     * @param tempo long
     */
    public void dispararEsquerda(long tempo) {
        new BolaFogoEsquerda(bolasFogo[0], getHeroi().getSprite().getUltimaPosicao()).lancar(tempo);
    }

    /**
     * dispararDireita
     *
     * @param tempo long
     */
    public void dispararDireita(long tempo) {
        new BolaFogoDireita(bolasFogo[1], getHeroi().getSprite().getUltimaPosicao()).lancar(tempo);
    }

    /**
     * dispararParado
     *
     * @param tempo long
     */
    public void dispararParado(long tempo) {
        ultimaOrientacao.disparar(tempo);
    }

}
