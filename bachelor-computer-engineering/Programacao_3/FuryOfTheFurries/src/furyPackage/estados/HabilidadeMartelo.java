/* Generated by Together */

package furyPackage.estados;

import furyPackage.Martelo;
import furyPackage.MarteloBaixo;
import furyPackage.MarteloDireito;
import furyPackage.MarteloEsquerdo;
import furyPackage.Tiny;
import jge2d.AnimacaoSprite;
import jge2d.Ponto;

/**
 * Habilidade que permite o Tiny ter um martelo
 */
public final class HabilidadeMartelo extends Habilidade {

    private Martelo[] martelos;
    private Martelo martelo;

    public static final String NOME_HABILIDADE = "martelo";

    public static final String ESQUERDA = NOME_HABILIDADE + NOME_ESQUERDA;
    public static final String DIREITA = NOME_HABILIDADE + NOME_DIREITA;
    public static final String FRENTE = NOME_HABILIDADE + NOME_FRENTE;
    public static final String HOP = NOME_HABILIDADE + NOME_HOP;
    public static final String FLY_DIREITA = NOME_HABILIDADE + NOME_FLY_DIREITA;
    public static final String FLY_ESQUERDA = NOME_HABILIDADE + NOME_FLY_ESQUERDA;
    public static final String SELECT = NOME_HABILIDADE + NOME_SELECT;


    /**
     * @param heroi - Tiny
     * @param cor - Cor da habilidade
     * @param disponivel - Disponibilidade da habilidade
     * @param martelo - Martelo a atribuir à habilidade
     */
    public HabilidadeMartelo(Tiny heroi, boolean disponivel) {
        super(heroi, disponivel);

        martelos = new Martelo[] {
            new MarteloEsquerdo("marteloEsquerdo", new Ponto(), heroi.getNivel(), this),
            new MarteloBaixo("marteloBaixo", new Ponto(), heroi.getNivel(), this),
            new MarteloDireito("marteloDireito", new Ponto(), heroi.getNivel(), this)
        };

        heroi.getSprite().adicionarAnimacao(FRENTE, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {309} , new int[] {309}, new int[] {309}, 1, 1000, 1));
        heroi.getSprite().adicionarAnimacao(DIREITA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {}, new int[] {235, 236, 237, 238, 239, 240, 241, 242}, new int[] {308, 311}, 0, 100, 50));
        heroi.getSprite().adicionarAnimacao(ESQUERDA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {}, new int[] {248, 249, 250, 251, 252, 253, 254, 255}, new int[] {310, 312}, 0, 100, 50));
        heroi.getSprite().adicionarAnimacao(HOP, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {295}, new int[] {296,295}, new int[] {295}, 100, 200, 100));
        heroi.getSprite().adicionarAnimacao(FLY_DIREITA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {261}, new int[] {262,263,264,265,266,267}, new int[] {268}, 100, 100, 100));
        heroi.getSprite().adicionarAnimacao(FLY_ESQUERDA, new AnimacaoSprite(heroi.getNivel().getImagem("furries"), new int[] {274}, new int[] {275,276,277,278,279,280}, new int[] {281}, 100, 100, 100));
        heroi.getSprite().adicionarAnimacao(SELECT, new AnimacaoSprite(heroi.getNivel().getImagem("animacoesSeleccao"), new int[] {}, new int[] {13, 14, 15, 16, 17, 18, 17, 16, 15, 14}, new int[] {}, 0, 75, 0));
    }

    /**
     * Dispara um martelo na direcção da orientação do Tiny
     */
    public void disparar(long tempo) {
        getHeroi().getOrientacaoActual().disparar(tempo);
        martelo.martelar(tempo);
        martelo.getNivel().adicionarIteravel(martelo);
    }

    public String getAnimacaoEsquerda() {
        return ESQUERDA;
    }

    public String getAnimacaoDireita() {
        return DIREITA;
    }

    public String getAnimacaoFrente() {
        return FRENTE;
    }

    public String getAnimacaoSalto() {
        return HOP;
    }

    public String getAnimacaoSaltoEsquerdo() {
        return FLY_ESQUERDA;
    }

    public String getAnimacaoSaltoDireito() {
        return FLY_DIREITA;
    }

    public String getAnimacaoSeleccao() {
        return SELECT;
    }

    public String toString() {
        return NOME_HABILIDADE;
    }

    /**
     * dispararEsquerda
     *
     * @param tempo long
     */
    public void dispararEsquerda(long tempo) {
        martelo = new Martelo(martelos[Orientacao.ESQUERDA], getHeroi().getSprite().getUltimaPosicao());
    }

    /**
     * dispararDireita
     *
     * @param tempo long
     */
    public void dispararDireita(long tempo) {
        martelo = new Martelo(martelos[Orientacao.DIREITA], getHeroi().getSprite().getUltimaPosicao());
    }

    /**
     * dispararParado
     *
     * @param tempo long
     */
    public void dispararParado(long tempo) {
        martelo = new Martelo(martelos[Orientacao.PARADO], getHeroi().getSprite().getUltimaPosicao());
    }
}
